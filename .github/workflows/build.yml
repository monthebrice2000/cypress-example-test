name: Nutriboard Service app
on: push

jobs:
  # Label of the container job
  container-job:
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container:
      image: cypress/included:12.2.0
      options: --user root
    # Service containers to run with `container-job`
#    services:
#      #      cypress-docker:
#      #        image: node:10.18-jessie
#      # Label used to access the service container
#      nutriboard-postgresql:
#        # Docker Hub image
#        image: postgres:14.5
#        # Provide the password for postgres
#        env:
#          POSTGRES_USER: nutriboard
#          POSTGRES_PASSWORD:
#          POSTGRES_HOST_AUTH_METHOD:  trust
#        ports:
#          - 5432:5432
#        # Set health checks to wait until postgres has started
#        options: >-
#          --health-cmd pg_isready
#          --health-interval 10s
#          --health-timeout 5s
#          --health-retries 5
#      nutriboard-app:
#        image: tontonlaforce/nutriboarddd
#        env:
#          _JAVA_OPTIONS: -Xmx512m -Xms256m
#          SPRING_PROFILES_ACTIVE: prod,api-docs
#          MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: true
#          SPRING_DATASOURCE_URL: jdbc:postgresql://nutriboard-postgresql:5432/nutriboard
#          SPRING_LIQUIBASE_URL: jdbc:postgresql://nutriboard-postgresql:5432/nutriboard
#          JHIPSTER_SLEEP: 30 # gives time for other services to boot before the application
#        # If you want to expose these ports outside your dev PC,
#        ports:
#          - 8080:8080

    steps:
      # Downloads a copy of the code in your repository before running CI tests
      - name: Check out repository code
        uses: actions/checkout@v3

      # Performs a clean installation of all dependencies in the `package.json` file
      # For more information, see https://docs.npmjs.com/cli/ci.html
      - name: Install dependencies
        run: |
          ls
          echo ----------------------------------------
          uname --all
          echo ----------------------------------------
          apt-get install sudo
          echo ----------------------------------------
          sudo npm --version
          echo ----------------------------------------
          sudo npx cypress --version
          echo ----------------------------------------
          #sudo npm ci
#      - name: Request Nutriboard App
#        run: |
#          sleep 60
#          apt-get update
#          apt-get install curl -y
#          # curl http://172.18.0.4:8080/
#          curl http://nutriboard-app:8080
#          #curl https://google.com
#      - name: Run Tests E2E
#        #        env:
#        #          CYPRESS_BASE_URL: nutriboard-app:8080/
#        run: |
#          sudo apt install -y openjdk-11-jdk
#          echo ---------------- ${JAVA_HOME} --------------------
#          java --version
#          echo ---------------- ${JAVA_HOME} --------------------
#          npm install @cypress/code-coverage allure-commandline allure cypress-mochawesome-reporter @shelex/cypress-allure-plugin @bahmutov/cypress-esbuild-preprocessor @badeball/cypress-cucumber-preprocessor esbuild cypress-audit
#          # mkdir ./cypress/screenshots
#          rm -rf ./allure-results
#          rm -fr ./allure-report
#          npm run cypress:run
#      - name: Generate Report
#        run: |
#          rm -fr ./allure-report
#          echo ----------------------------------------
#          ls ./
#          echo ----------------------------------------
#          ls -l allure-results/
#          sudo npx allure generate ./allure-results -o ./allure-report --clean
#      - name: Get if branch exist
#        run: |
#          TEST=$(git fetch origin gh-page && echo true || echo false)
#          echo "BRANCH_IS_EXISTING=${TEST}" >> $GITHUB_ENV
#          echo ----------------- ${{env.BRANCH_IS_EXISTING}} ------------------------
#          echo ----------------- ${TEST} ${BRANCH_IS_EXISTING} ------------------------
#      - name: Delete branch gh-page if exists
#        if: env.BRANCH_IS_EXISTING == 'true'
#        run: |
#          echo '------------delete gh-page branch ${{env.BRANCH_IS_EXISTING}} --------------'
#          git push origin --delete gh-page
      - name: Init new repo in dist folder and commit generated files
        run: |
#          ls
#          echo '---------------------'
#          git config --local user.email "monthedjeumoubrice2000@gmail.com"
#          git config --local user.name "monthebrice2000"
#          git branch
#          git branch gh-page
#          git switch gh-page
#          git branch
          sudo apt-get update
          sudo apt-get install shopt -y
          shopt -s extglob
          apt-get update
#          rm -rf -- !(allure-report)
#          ls
#          echo '---------------------'
#          cp -r ./allure-report/* ./
#          ls
#          rm -rf ./allure-report
#          git add -A
#          git commit -m 'deploy'
#          git push origin gh-page
#      - name: Setup Pages
#        uses: actions/configure-pages@v2
#      - name: Build with Jekyll
#        uses: actions/jekyll-build-pages@v1
#        with:
#          source: ./
#          destination: ./_site
#      - name: Upload artifact
#        uses: actions/upload-pages-artifact@v1

#  # Deployment job
#  deploy:
#    # Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
#    permissions:
#      contents: read
#      pages: write
#      id-token: write
#    # Allow one concurrent deployment
#    concurrency:
#      group: "pages"
#      cancel-in-progress: true
#    environment:
#      name: github-pages
#      url: ${{ steps.deployment.outputs.page_url }}
#    runs-on: ubuntu-latest
#    needs: container-job
#    steps:
#      - name: Deploy to GitHub Pages
#        id: deployment
#        uses: actions/deploy-pages@v1
